// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin") // admin, editor, moderator
  status    String   @default("active") // active, inactive, suspended
  avatar    String?
  phone     String?
  department String?
  permissions String[] @default([]) // array of permission strings
  lastLogin DateTime?
  loginCount Int     @default(0)
  isEmailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  passwordChangedAt DateTime?
  twoFactorEnabled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @db.ObjectId // who created this user
  
  // Relations
  createdNews News[] @relation("CreatedBy")
  sentNotifications Notification[] @relation("CreatedBy")
  userSessions UserSession[]
  userActivities UserActivity[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  sessionId String   @unique
  ipAddress String?
  userAgent String?
  device    String?
  location  String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  action    String   // login, logout, create_news, edit_news, delete_news, etc.
  resource  String?  // news_id, category_id, etc.
  details   String?  // JSON string with additional details
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relation to News
  news      News[]

  @@map("categories")
}

model News {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  imageUrl    String?
  categoryId  String   @db.ObjectId
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  createdBy   String?  @db.ObjectId
  
  // Relations
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  analytics   NewsAnalytics[]
  author      User?    @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("news")
}

model NewsAnalytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  newsId    String   @db.ObjectId
  date      DateTime @default(now())
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  readTime  Int      @default(0) // in seconds
  source    String?  // referrer source
  device    String?  // mobile, desktop, tablet
  location  String?  // country/region
  
  // Relations
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@map("news_analytics")
}

model UserEngagement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String   
  newsId    String?  @db.ObjectId
  action    String   // view, like, share, comment
  timestamp DateTime @default(now())
  device    String?
  location  String?
  duration  Int?     // session duration in seconds

  @@map("user_engagement")
}

model FCMToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String?  // Optional, for registered users
  deviceId  String   @unique
  platform  String   // "android" or "ios"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fcm_tokens")
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  imageUrl    String?
  newsId      String?  @db.ObjectId
  type        String   @default("general") // general, news, promotion, alert
  targetType  String   @default("all") // all, specific, category
  targetValue String?  // category ID or specific token IDs
  status      String   @default("draft") // draft, scheduled, sent, failed
  scheduledAt DateTime?
  sentAt      DateTime?
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author      User     @relation("CreatedBy", fields: [createdBy], references: [id])
  deliveries  NotificationDelivery[]

  @@map("notifications")
}

model NotificationDelivery {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String   @db.ObjectId
  tokenId        String   @db.ObjectId
  status         String   @default("pending") // pending, delivered, failed, clicked
  sentAt         DateTime?
  deliveredAt    DateTime?
  clickedAt      DateTime?
  errorMessage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("notification_deliveries")
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  key         String   @unique
  permissions String[]
  status      String   @default("active") // active, inactive
  lastUsed    DateTime?
  expiresAt   DateTime?
  rateLimit   Int      @default(1000)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  requests    ApiRequest[]

  @@map("api_keys")
}

model ApiRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  keyId     String   @db.ObjectId
  endpoint  String
  method    String
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  // Relations
  apiKey    ApiKey   @relation(fields: [keyId], references: [id], onDelete: Cascade)

  @@map("api_requests")
}
